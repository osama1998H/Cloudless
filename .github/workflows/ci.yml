name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.62.2
          args: --timeout=5m

      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Go vet
        run: make vet

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Install dependencies
        run: make mod

      - name: Generate protobuf
        run: make proto

      - name: Run unit tests
        run: make test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.out
          flags: unittests
          fail_ci_if_error: false
        continue-on-error: true

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Install dependencies
        run: make mod

      - name: Generate protobuf
        run: make proto

      - name: Build coordinator
        run: make build-coordinator

      - name: Build agent
        run: make build-agent

      - name: Build CLI
        run: make build-cli

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: cloudless-binaries
          path: build/*
          retention-days: 7

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build coordinator image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployments/docker/Dockerfile.coordinator
          push: false
          tags: cloudless/coordinator:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build agent image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployments/docker/Dockerfile.agent
          push: false
          tags: cloudless/agent:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, test, build, docker]
    if: always()
    steps:
      - name: Check job status
        run: |
          if [ "${{ needs.lint.result }}" != "success" ]; then
            echo "❌ Lint failed"
            exit 1
          fi
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "❌ Tests failed"
            exit 1
          fi
          if [ "${{ needs.build.result }}" != "success" ]; then
            echo "❌ Build failed"
            exit 1
          fi
          if [ "${{ needs.docker.result }}" != "success" ]; then
            echo "❌ Docker build failed"
            exit 1
          fi
          echo "✅ All CI checks passed!"
