name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  GO_VERSION: '1.24'
  GOLANGCI_LINT_VERSION: 'v1.62.2'

permissions:
  contents: read
  security-events: write
  pull-requests: read

jobs:
  generate-proto:
    name: Generate Protobuf Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          protoc --version

      - name: Install Go protobuf plugins
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Verify protoc plugins installation
        run: |
          which protoc-gen-go
          which protoc-gen-go-grpc
          echo "âœ“ Plugins installed and accessible"

      - name: Generate protobuf code
        run: make proto

      - name: Upload generated files
        uses: actions/upload-artifact@v5
        with:
          name: proto-generated
          path: pkg/api/*.pb.go
          retention-days: 1

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: [generate-proto]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0

      - name: Download proto files
        uses: actions/download-artifact@v5
        with:
          name: proto-generated
          path: pkg/api/

      - name: Setup Go
        uses: actions/setup-go@v6.0.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4.3.0
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          args: --timeout 5m

      - name: Run go vet
        run: make vet

      - name: Check go mod tidy
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [generate-proto]
    strategy:
      matrix:
        go-version: ['1.24']
        os: [ubuntu-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0

      - name: Download proto files
        uses: actions/download-artifact@v5
        with:
          name: proto-generated
          path: pkg/api/

      - name: Setup Go
        uses: actions/setup-go@v6.0.0
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4.3.0
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run tests
        run: make test

      - name: Run tests with race detector
        run: make test-race

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [generate-proto]
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
          - darwin/amd64
          - darwin/arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0

      - name: Download proto files
        uses: actions/download-artifact@v5
        with:
          name: proto-generated
          path: pkg/api/

      - name: Setup Go
        uses: actions/setup-go@v6.0.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get platform details
        id: platform
        run: |
          PLATFORM=${{ matrix.platform }}
          echo "GOOS=${PLATFORM%/*}" >> $GITHUB_OUTPUT
          echo "GOARCH=${PLATFORM#*/}" >> $GITHUB_OUTPUT

      - name: Build binaries
        env:
          GOOS: ${{ steps.platform.outputs.GOOS }}
          GOARCH: ${{ steps.platform.outputs.GOARCH }}
        run: |
          CGO_ENABLED=0 make build-platform

      - name: Upload artifacts
        uses: actions/upload-artifact@v5
        with:
          name: cloudless-${{ steps.platform.outputs.GOOS }}-${{ steps.platform.outputs.GOARCH }}
          path: build/${{ steps.platform.outputs.GOOS }}-${{ steps.platform.outputs.GOARCH }}/*

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [generate-proto, lint, test, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download proto files
        uses: actions/download-artifact@v5
        with:
          name: proto-generated
          path: pkg/api/

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run integration tests
        run: |
          make docker
          make compose-up
          sleep 10
          make test-integration
          make compose-down

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run gosec security scanner
        uses: securego/gosec@master
        with:
          args: '-fmt sarif -out gosec-results.sarif ./...'

      - name: Upload gosec results
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: 'gosec-results.sarif'

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [generate-proto, lint, test, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download proto files
        uses: actions/download-artifact@v5
        with:
          name: proto-generated
          path: pkg/api/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            cloudless/coordinator
            cloudless/agent
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push coordinator
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./deployments/docker/Dockerfile.coordinator
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push agent
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./deployments/docker/Dockerfile.agent
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [lint, test, build, docker]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}